Big O Notation Practice
1. O(n + 10)
   1. O(n)
2. O(100 * n)
   1. O(n)
3. O(25)
   1. O(1)
4. O(n^2+n^3)
   1. O(n)
5. O(n+n+n)
   1. O(n)
6. O(1000 * log(n) + n)
   1. O(n²)
7. O(1000*n*log(n)+n)
   1. O(n²)
8. O(2^n + n^2)
   1. O(n)
9. O(5 + 3 + 1)
   1. O(1)
10. O(n + n^(½)+n^2+n*log(n)^10)
   1. O(n²)




function logUpTo(n) {
  for (let i = 1; i <= n; i++) {
        console.log(i);
  }
}


—------------Time Complexity :  O(n) Linear


function logAtLeast10(n) {
  for (let i = 1; i <= Math.max(n, 10); i++) {
        console.log(i);
  }
}


—-----------Time Complexity: O(1) Constant










function onlyElementsAtEvenIndex(array) {
  let newArray = [];
  for (let i = 0; i < array.length; i++) {
        if (i % 2 === 0) {
          newArray.push(array[i]);
        }
  }
  return newArray;
}


—-----------------Time Complexity:O(n) Linear


function subtotals(array) {
  let subtotalArray = [];
  for (let i = 0; i < array.length; i++) {
        let subtotal = 0;
        for (let j = 0; j <= i; j++) {
          subtotal += array[j];
        }
        subtotalArray.push(subtotal);
  }
  return subtotalArray;
}


—-------------------- Time Complexity:O(n²) Quadratic


function vowelCount(str) {
  let vowelCount = {};
  const vowels = "aeiouAEIOU";


  for (let char of str) {
        if(vowels.includes(char)) {
          if(char in vowelCount) {
            vowelCount[char] += 1;
          } else {
            vowelCount[char] = 1;
          }
        }
  }


  return vowelCount;
}


—-------------Time complexity:O(n) Linear
Short Answer




1. False
2. False
3. True
4. Constant
5. Constant
6. Linear
7. Constant
8. Constant
9. Constant
10. Constant
11. Constant
12. Constant
13. Space is Linear